{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","onSelectedUserId","useState","query","setQuery","selectedActivities","setSelectedActivities","filterTodos","useMemo","filter","todo","todoTitleToLowerCase","title","toLowerCase","queryToLowerCase","includes","completed","className","type","placeholder","value","onChange","event","target","disabled","selected","map","classnames","readOnly","checked","userId","onClick","id","request","url","fetch","then","res","json","CurrentUser","onSetSelectedUserId","selectedUser","setSelectedUser","useEffect","user","username","email","phone","App","setSelectedUserId","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fec5e929.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  selectedUserId: number;\n  onSelectedUserId: (number: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  onSelectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [selectedActivities, setSelectedActivities] = useState('');\n\n  const filterTodos = useMemo(() => (\n    todos.filter(todo => {\n      const todoTitleToLowerCase = todo.title.toLowerCase();\n      const queryToLowerCase = query.toLowerCase();\n\n      return todoTitleToLowerCase.includes(queryToLowerCase);\n    })\n      .filter(todo => {\n        switch (selectedActivities) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          case 'select all':\n            return todo;\n          default:\n            return todo;\n        }\n      })\n  ), [query, todos, selectedActivities]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>\n        Todos:\n      </h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"search\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <select\n          onChange={\n            (event) => setSelectedActivities(event.target.value)\n          }\n        >\n          <option\n            value=\"0\"\n            disabled\n            selected\n          >\n            select activities\n          </option>\n          <option>\n            active\n          </option>\n          <option>\n            completed\n          </option>\n          <option>\n            select all\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {filterTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames('TodoList__item', (todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked'\n              ))}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={classnames(\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                   selectedUserId === todo.userId,\n                  },\n                  'button',\n                )}\n                onClick={() => {\n                  onSelectedUserId(todo.userId);\n                }}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { User } from './react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => res.json());\n};\n\nexport const getTodos = () => {\n  return request('todos');\n};\n\nexport const getUsersById = (userId: number): Promise<User> => {\n  return request(`users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsersById } from '../../api';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number;\n  onSetSelectedUserId: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  onSetSelectedUserId,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUsersById(selectedUserId)\n      .then(user => {\n        return setSelectedUser(user);\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${selectedUser?.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser?.username}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        className=\"TodoList__user-button button\"\n        type=\"button\"\n        onClick={() => {\n          onSetSelectedUserId(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              onSetSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}